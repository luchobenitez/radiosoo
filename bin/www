#!/usr/bin/env node

/*
 * Start Express server.
 *
 *   NOTE: To alter the environment we can set the
 *   NODE_ENV environment variable, for example:
 *
 *     $ NODE_ENV=production node app.js
 *
 *   This is important - many caching mechanisms
 *   are *only* enabled when in production!
*/

/**
 * Module dependencies.
 */

var app = require('../src/app');
var debug = require('debug')('radiosoo:server');
var http = require('http');
var semver = require('semver');                  // https://npmjs.org/package/semver
var config = require('../src/config/config');         // Get configuration file
var io     = require('socket.io')(server);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// "server.listen" for socket.io
server.listen(app.get('port'), function () {

 // Test for correct node version as spec'ed in package.info
 if (!semver.satisfies(process.versions.node, config.engine)) {
   debug('Error: unsupported version of Node or io.js!'.red);
   debug(config.name.red + ' needs Node or io.js version '.red + config.engine.red);
   process.exit(0);
 }

 // Log how we are running
 debug('listening on port ' + app.get('port').toString().green);
 debug('listening in ' + app.settings.env.green + ' mode.');
 debug('Ctrl+C'.green + ' to shut down. ;)');

 // Exit cleanly on Ctrl+C
 process.on('SIGINT', function () {
   io.close();  // close socket.io
   console.log('\n');
   debug('has ' + 'shutdown'.green);
   debug('was running for ' + Math.round(process.uptime()).toString().green + ' seconds.');
   process.exit(0);
 });
});

/**
 * Emit Pageviews on Socket.io for Dashboard
 *
 *   Web Page (Client) --->> ( `pageview` messages ) --->> Server
 *   Web Page (Client) <<--- (`dashUpdate` messages) <<--- Server
 */

var connectedCount = 0;

io.on('connection', function (socket) {
  connectedCount += 1;
  // Listen for pageview messages from clients
  socket.on('pageview', function (message) {
    var ip = socket.handshake.headers['x-forwarded-for'] || socket.client.conn.remoteAddress || socket.handshake.address;
    var url = message;
    // Broadcast dashboard update (to all clients in default namespace)
    io.emit('dashUpdate', {
      connections: connectedCount,
      ip: ip,
      url: url,
      timestamp: new Date()
    });
  });
  // Update dashboard connections on disconnect events
  socket.on('disconnect', function () {
    connectedCount -= 1;
    io.emit('dashUpdate', {
      connections: connectedCount
    });
  });
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
